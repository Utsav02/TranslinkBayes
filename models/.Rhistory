arrange(trip_id, stop_sequence) %>%
group_by(trip_id) %>%
mutate(previous_stop_delay = lag(delay_seconds, order_by = stop_sequence)) %>%
ungroup()
library(lubridate)
merged_data <- merged_data %>%
mutate(
hour = hour(timestamp),
day_of_week = wday(timestamp, label = TRUE, abbr = TRUE),
hour_day = interaction(hour, day_of_week, sep = "_"),
is_rush_hour = case_when(
hour %in% 7:9 | hour %in% 16:18 ~ TRUE,
TRUE ~ FALSE
),
is_weekend = day_of_week %in% c("Sat", "Sun"),
)
library(dplyr)
library(lubridate)
library(DBI)
library(RSQLite)
# Connect to database
conn <- dbConnect(SQLite(), "../database/gtfs_realtime.db")
stop_delays <- dbReadTable(conn, "stop_delays")
dbDisconnect(conn)
# Ensure proper types
stop_delays <- stop_delays %>%
mutate(
timestamp = as.POSIXct(timestamp, tz = "UTC"),
delay_seconds = as.numeric(delay_seconds),
stop_sequence = as.integer(stop_sequence),
previous_stop_delay = as.numeric(previous_stop_delay)
)
# Filter last 30 days
latest_timestamp <- max(stop_delays$timestamp, na.rm = TRUE)
filtered_delays <- stop_delays
# Deduplicate by trip_id, stop_id, and timestamp (keep latest)
deduped_delays <- filtered_delays %>%
group_by(trip_id, stop_id) %>%
slice_max(order_by = timestamp, n = 1) %>%
ungroup()
# Connect to static DB for merging shape_dist and direction
conn_static <- dbConnect(SQLite(), "../database/gtfs_static.db")
stop_times <- dbReadTable(conn_static, "stop_times")
trips <- dbReadTable(conn_static, "trips")
dbDisconnect(conn_static)
# Ensure proper types for merging
stop_times <- stop_times %>%
mutate(
trip_id = as.character(trip_id),
stop_id = as.character(stop_id),
stop_sequence = as.integer(stop_sequence),
shape_dist_traveled = as.numeric(shape_dist_traveled)
)
trips <- trips %>%
mutate(
trip_id = as.character(trip_id),
direction_id = as.factor(direction_id)
)
deduped_delays <- deduped_delays %>%
mutate(
trip_id = as.character(trip_id),
stop_id = as.character(stop_id)
)
# Merge shape_dist_traveled and direction
merged_data <- deduped_delays %>%
left_join(stop_times %>% dplyr::select(trip_id, stop_id, shape_dist_traveled, stop_sequence),
by = c("trip_id", "stop_id", "stop_sequence")) %>%
left_join(trips %>% dplyr::select(trip_id, direction_id), by = "trip_id") %>%
mutate(
shape_dist_traveled = shape_dist_traveled - min(shape_dist_traveled, na.rm = TRUE),
direction_id = as.factor(direction_id)
)
merged_data <- merged_data %>% filter(route_id == 6641)
merged_data <- merged_data %>%
arrange(trip_id, stop_sequence) %>%
group_by(trip_id) %>%
mutate(previous_stop_delay = lag(delay_seconds, order_by = stop_sequence)) %>%
ungroup()
library(lubridate)
merged_data <- merged_data %>%
mutate(
hour = hour(timestamp),
day_of_week = wday(timestamp, label = TRUE, abbr = TRUE),
hour_day = interaction(hour, day_of_week, sep = "_"),
is_rush_hour = case_when(
hour %in% 7:9 | hour %in% 16:18 ~ TRUE,
TRUE ~ FALSE
),
is_weekend = day_of_week %in% c("Sat", "Sun"),
)
filtered_data <- merged_data %>%
filter(!is.na(delay_seconds),
!is.na(previous_stop_delay),
!is.na(stop_sequence),
!is.na(hour),
!is.na(shape_dist_traveled),
!is.na(trip_id),
!is.na(stop_id)) %>%
mutate(
trip_index = as.integer(as.factor(trip_id)),
stop_index = as.integer(as.factor(stop_id)),
hour = as.integer(hour) + 1,
dow = as.integer(as.factor(day_of_week))
)
simulate_y_rep_base <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow] +
posterior$trip_effect[s, data$trip_index]
}
# Simulate one draw of y_rep
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
simulate_y_rep_extended <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow] +
posterior$trip_effect[s, data$trip_index] +
posterior$stop_effect[s, data$stop_index] +
posterior$phi[s] * data$previous_stop_delay  # AR(1)-like
}
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
# Simulate from base
y_base_rep <- simulate_y_rep_base(fit_base, filtered_data)
# Simulate from extended
y_ext_rep <- simulate_y_rep_extended(fit_extended, filtered_data)
simulate_y_rep_base <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow]
}
# Simulate one draw of y_rep
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
simulate_y_rep_extended <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow] +
posterior$stop_effect[s, data$stop_index] +
posterior$phi[s] * data$previous_stop_delay  # AR(1)-like
}
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
# Simulate from base
y_base_rep <- simulate_y_rep_base(fit_base, filtered_data)
# Simulate from extended
y_ext_rep <- simulate_y_rep_extended(fit_extended, filtered_data)
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow]
simulate_y_rep_base <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow]
}
# Simulate one draw of y_rep
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
simulate_y_rep_extended <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow] +
posterior$stop_effect[s, data$stop_index] +
posterior$phi[s] * data$previous_stop_delay  # AR(1)-like
}
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
# Simulate from base
y_base_rep <- simulate_y_rep_base(fit_base, filtered_data)
# Simulate from extended
y_ext_rep <- simulate_y_rep_extended(fit_extended, filtered_data)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE, col = "grey", main = "PPC: Base vs Extended")
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
legend("topright", legend = c("Base", "Extended"), col = c("blue", "red"), lwd = 2)
hist(observed, probability = TRUE, col = "grey",
main = "PPC: Base vs Extended",
xlab = "filtered_data$delay_seconds",
xlim = c(-4000, 4000))  # Adjust this range as needed
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", xlim = c(-4000, 4000)) )
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", xlim = c(-4000, 4000))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", xlim = c(-4000, 10000))
lines(density(y_base_rep), col = "blue", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(-4000, 4000))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(-100, 1000))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0, 1000))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0, 1))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended")
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.005))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.0005))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.0025))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.0005))
lines(density(y_base_rep), col = "blue", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.00005))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.005))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.005), xlim = c(-10, 4000))
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.005), xlim = c(-2000, 4000))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
legend("topright", legend = c("Base", "Extended"), col = c("blue", "red"), lwd = 2)
bayesplot
?bayesplot
pairs(fit_extended, pars = c("alpha", "sigma", "nu"))
check_hmc_diagnostics(fit_extended)
pairs(fit_extended, pars = c("phi", "stop_effect", "trip_effect"))
pairs(fit_extended, pars = c("phi", "stop_effect", "beta[1]"))
print(fit_extended)
pairs(fit_extended, pars = c("phi", "stop_effect", "beta_prev"))
pairs(fit_extended, pars = c("phi", "beta_prev"))
pairs(fit_extended, pars = c("alpha", "sigma", "nu","phi"))
predicted_means <- colMeans(rstan::extract(fit_extended)$mu)
posterior <- rstan::extract(fit_extended)
# Posterior draws for parameters
alpha_draws <- posterior$alpha
beta_prev_draws <- posterior$beta_prev
beta_dist_draws <- posterior$beta_dist
beta_hour_draws <- posterior$beta_hour
beta_dow_draws <- posterior$beta_dow
trip_effect_draws <- posterior$trip_effect
stop_effect_draws <- posterior$stop_effect
sigma_draws <- posterior$sigma
nu_draws <- posterior$nu
# Compute posterior mean predictions manually
N <- nrow(filtered_data)
S <- length(alpha_draws)  # number of samples
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
for (n in 1:N) {
mu_draws[s, n] <-
alpha_draws[s] +
beta_prev_draws[s] * filtered_data$previous_stop_delay[n] +
beta_dist_draws[s] * filtered_data$shape_dist_traveled[n] +
beta_hour_draws[s, filtered_data$hour[n]] +
beta_dow_draws[s, filtered_data$dow[n]] +
trip_effect_draws[s, filtered_data$trip_index[n]] +
stop_effect_draws[s, filtered_data$stop_index[n]]
}
}
for (s in 1:S) {
for (n in 1:N) {
mu_draws[s, n] <-
alpha_draws[s] +
beta_prev_draws[s] * filtered_data$previous_stop_delay[n] +
beta_dist_draws[s] * filtered_data$shape_dist_traveled[n] +
beta_hour_draws[s, filtered_data$hour[n]] +
beta_dow_draws[s, filtered_data$dow[n]] +
stop_effect_draws[s, filtered_data$stop_index[n]]
}
}
# Posterior mean across draws
predicted_means <- colMeans(mu_draws)
residuals <- filtered_data$delay_seconds - predicted_means
filtered_data %>%
ggplot(aes(x = factor(hour), y = residuals)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Residuals by Hour of Day", x = "Hour", y = "Residuals") +
theme_minimal()
filtered_data %>%
ggplot(aes(x = factor(hour), y = residuals), ylim = c = (-1000,1000)) +
filtered_data %>%
ggplot(aes(x = factor(hour), y = residuals), ylim = c(-1000,1000)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Residuals by Hour of Day", x = "Hour", y = "Residuals") +
theme_minimal()
filtered_data <- merged_data %>%
filter(!is.na(delay_seconds),
!is.na(previous_stop_delay),
!is.na(stop_sequence),
!is.na(hour),
!is.na(shape_dist_traveled),
!is.na(trip_id),
!is.na(stop_id)) %>%
%>%
filtered_data <- merged_data %>%
filter(!is.na(delay_seconds),
!is.na(previous_stop_delay),
!is.na(stop_sequence),
!is.na(hour),
!is.na(shape_dist_traveled),
!is.na(trip_id),
!is.na(stop_id)) %>%
filter(timestamp >= latest_timestamp - days(30))
%>%
filtered_data <- merged_data %>%
filter(!is.na(delay_seconds),
!is.na(previous_stop_delay),
!is.na(stop_sequence),
!is.na(hour),
!is.na(shape_dist_traveled),
!is.na(trip_id),
!is.na(stop_id)) %>%
filter(timestamp >= latest_timestamp - days(30))%>%
mutate(
trip_index = as.integer(as.factor(trip_id)),
stop_index = as.integer(as.factor(stop_id)),
hour = as.integer(hour) + 1,
dow = as.integer(as.factor(day_of_week))
)
simulate_y_rep_base <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow]
}
# Simulate one draw of y_rep
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
simulate_y_rep_extended <- function(fit, data) {
posterior <- rstan::extract(fit)
S <- length(posterior$alpha)
N <- nrow(data)
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
mu_draws[s, ] <- posterior$alpha[s] +
posterior$beta_prev[s] * data$previous_stop_delay +
posterior$beta_dist[s] * data$shape_dist_traveled +
posterior$beta_hour[s, data$hour] +
posterior$beta_dow[s, data$dow] +
posterior$stop_effect[s, data$stop_index] +
posterior$phi[s] * data$previous_stop_delay  # AR(1)-like
}
set.seed(123)
y_rep <- rt(N, df = posterior$nu[1]) * posterior$sigma[1] + mu_draws[1, ]
return(y_rep)
}
# Simulate from base
y_base_rep <- simulate_y_rep_base(fit_base, filtered_data)
# Simulate from extended
y_ext_rep <- simulate_y_rep_extended(fit_extended, filtered_data)
# PPC plot
hist(filtered_data$delay_seconds, probability = TRUE,
col = "grey", main = "PPC: Base vs Extended", ylim = c(0,.005), xlim = c(-2000, 4000))
lines(density(y_base_rep), col = "blue", lwd = 2)
lines(density(y_ext_rep), col = "red", lwd = 2)
legend("topright", legend = c("Base", "Extended"), col = c("blue", "red"), lwd = 2)
hist(observed, probability = TRUE, col = "grey",
main = "PPC: Base vs Extended",
xlab = "filtered_data$delay_seconds",
xlim = c(-4000, 4000))  # Adjust this range as needed
lines(density(y_rep_base[1, ]), col = "blue", lwd = 2)
lines(density(y_rep_ext[1, ]), col = "red", lwd = 2)
legend("topright", legend = c("Base", "Extended"),
col = c("blue", "red"), lwd = 2)
pairs(fit_extended, pars = c("alpha", "sigma", "nu","phi"))
posterior <- rstan::extract(fit_extended)
# Posterior draws for parameters
alpha_draws <- posterior$alpha
beta_prev_draws <- posterior$beta_prev
beta_dist_draws <- posterior$beta_dist
beta_hour_draws <- posterior$beta_hour
beta_dow_draws <- posterior$beta_dow
trip_effect_draws <- posterior$trip_effect
stop_effect_draws <- posterior$stop_effect
sigma_draws <- posterior$sigma
nu_draws <- posterior$nu
# Compute posterior mean predictions manually
N <- nrow(filtered_data)
S <- length(alpha_draws)  # number of samples
mu_draws <- matrix(NA, nrow = S, ncol = N)
for (s in 1:S) {
for (n in 1:N) {
mu_draws[s, n] <-
alpha_draws[s] +
beta_prev_draws[s] * filtered_data$previous_stop_delay[n] +
beta_dist_draws[s] * filtered_data$shape_dist_traveled[n] +
beta_hour_draws[s, filtered_data$hour[n]] +
beta_dow_draws[s, filtered_data$dow[n]] +
stop_effect_draws[s, filtered_data$stop_index[n]]
}
}
for (s in 1:S) {
for (n in 1:N) {
mu_draws[s, n] <-
alpha_draws[s] +
beta_prev_draws[s] * filtered_data$previous_stop_delay[n] +
beta_dist_draws[s] * filtered_data$shape_dist_traveled[n] +
beta_hour_draws[s, filtered_data$hour[n]] +
beta_dow_draws[s, filtered_data$dow[n]] +
trip_effect_draws[s, filtered_data$trip_index[n]] +
stop_effect_draws[s, filtered_data$stop_index[n]]
}
}
# Posterior mean across draws
predicted_means <- colMeans(mu_draws)
residuals <- filtered_data$delay_seconds - predicted_means
filtered_data %>%
ggplot(aes(x = factor(hour), y = residuals), ylim = c(-1000,1000)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Residuals by Hour of Day", x = "Hour", y = "Residuals") +
theme_minimal()
filtered_data %>%
ggplot(aes(x = factor(day_of_week), y = residuals), ylim = c(-1000,1000)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Residuals by Hour of Day", x = "Hour", y = "Residuals") +
theme_minimal()
fit_base = readRDS("fit_base_route6641_dir0")
fit_base = readRDS("fit_base_route6641_dir0.rds")
print(fit_base, pars = c("alpha", "beta_prev", "beta_dist", "beta_hour", "beta_dow", "trip_effect", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
loo_base <- loo(fit_base)
loo_base
loo_compare(loo_base, loo_extended)
print(fit_base, pars = c("alpha", "beta_prev", "beta_dist", "trip_effect", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
print(fit_base, pars = c("alpha", "beta_prev", "beta_dist", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
print(fit_extended, pars = c("alpha", "beta_prev", "beta_dist", "beta_hour", "beta_dow", "trip_effect", "stop_effect", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
print(fit_extended, pars = c("alpha", "beta_prev", "beta_dist","phi", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
print(fit_base, pars = c("alpha", "beta_prev", "beta_dist", "sigma", "nu"), probs = c(0.1, 0.5, 0.9))
